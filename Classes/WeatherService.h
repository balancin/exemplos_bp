/*-
 * WSDL stubs for:  http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl
 *   Generated by:  fabiobalancin
 *           Date:  Thu Aug 26 18:47:35 2010
 *        Emitter:  Objective-C
 */

#ifndef __WeatherService__
#define __WeatherService__

#import <CoreServices/CoreServices.h>
#import <Foundation/Foundation.h>
#import "WSGeneratedObj.h"

/*-
 *   Web Service:  ndfdXML
 * Documentation:  The service has 11 exposed functions, NDFDgen, NDFDgenLatLonList,
 *                 NDFDgenByDay, NDFDgenByDayLatLonList, 
 *                                   LatLonListSubgrid, LatLonListLine,
 *                 LatLonListZipCode, CornerPoints, LatLonListSquare, GmlLatLonList,
 *                 and LatLonListCityNames.  
 *                                   For the NDFDgen function, the client needs to
 *                 provide a latitude and longitude pair and the product type.  
 *                                   The client also needs to provide the start and
 *                 end time (Local) of the period that it wants data for.  For the
 *                 time-series 
 *                                   product, the client needs to provide an array of
 *                 boolean values corresponding to which NDFD values are desired.
 *                                   For the NDFDgenByDay function, the client needs
 *                 to provide a latitude and longitude pair, the date (Local) it wants
 *                 to start 
 *                                   retrieving data for and the number of days worth
 *                 of data.  The client also needs to provide the format that is
 *                 desired.  
 *                                   For the multi point versions, NDFDgenLatLonList
 *                 and NDFDgenByDayLatLonList a space delimited list of latitude and
 *                 longitude 
 *                 		  pairs are substituted for the single latitude and longitude
 *                 input.  Each latitude and longitude 
 *                                   pair is composed of a latitude and longitude
 *                 delimited by a comma.  
 *                 		  For the LatLonListSubgrid, the user provides a comma delimited
 *                 latitude and longitude pair for the lower left and for 
 *                                   the upper right corners of a rectangular subgrid.
 *                  The function can also take a integer 
 *                                   resolution to reduce the number of grid points
 *                 returned. The service then returns a list of 
 *                                   latitude and longitude pairs for all the grid
 *                 points contained in the subgrid. 
 *                                   weather values should appear in the time series
 *                 product.  
 *                 		  For the LatLonListLine, The inputs are the same as the function
 *                 NDFDgen except the latitude and longitude pair is 
 *                 		  replaced by two latitude and longitude pairs, one for each end
 *                 point a line. The two points are delimited with a space.  
 *                                   The service then returns data for all the NDFD
 *                 points on the line formed by the two points.  
 *                 		  For the LatLonListZipCode function, the input is the same as
 *                 the NDFDgen function except the latitude and longitude values 
 *                 		  are relaced by a zip code for the 50 United States and Puerto
 *                 Rico.
 *                 		  For the LatLonListSquare function, the input is the same as the
 *                 NDFDgen function except the latitude and longitude values 
 *                 		  are relaced by a zip code for the 50 United States and Puerto
 *                 Rico.
 *                 		  For the CornerPoints function, the service requires a valid
 *                 NDFD grid name.  The function returns a 
 *                                   list of four latitude and longitude pairs, one
 *                 for each corner of the NDFD grid.  The function 
 *                                   also returns the minimum resolution required to
 *                 return the entire grid below the maximum points 
 *                                   threshold.
 *                                   For the GmlLatLonList function, the service
 *                 requires a list of latitude and longitude pairs, the time (UTC) the
 *                 user 
 *                 		  wants data for, the GML feature type and the array of boolean
 *                 values corresponding to which NDFD values are desired.
 *                                   For the GmlTimeSeries function, the service
 *                 requires a list of latitude and longitude pairs, the start and end
 *                 time (UTC) the user 
 *                 		  wants data for, a comparison type (IsEqual, Between,
 *                 GreaterThan, GreaterThan, GreaterThanEqualTo, LessThan, and  
 *                                   LessThanEqualTo), the GML feature type and The
 *                 input variable "propertyName" contains a comma delimited string of
 *                 NDFD element to 
 *                                   indicate which weather parameters are being
 *                 requested.
 *                                   For the LatLonListCityNames function, the
 *                 services requires a detail level that that ranges from 1 to 4. 
 *                 Level 1 generally represents
 *                                   large main cities.  Level 2 represents
 *                 progressively smaller cities or large cities that are close to
 *                 another even larger city.  Levels
 *                                   3 and 4 are part one and two of a list of cities
 *                 that help increase the areal coverage of the cities dataset.  This
 *                 functions
 *                                   returns a list of latitude and longitude values
 *                 along with a seperate list of city name for those point.
 */
/*-
 *   Method Name:  NDFDgenByDay
 * Documentation:  Returns National Weather Service digital weather forecast data
 *                 summarized over either 24- or 12-hourly periods
 */

@interface NDFDgenByDay : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(double) in_latitude in_longitude:(double) in_longitude in_startDate:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|date */) in_startDate in_numDays:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|integer */) in_numDays in_format:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|formatType */) in_format;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* NDFDgenByDay */


/*-
 *   Method Name:  NDFDgen
 * Documentation:  Returns National Weather Service digital weather forecast data
 */

@interface NDFDgen : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(double) in_latitude in_longitude:(double) in_longitude in_product:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|productType */) in_product in_startTime:(NSDate*) in_startTime in_endTime:(NSDate*) in_endTime in_weatherParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|weatherParametersType */) in_weatherParameters;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* NDFDgen */


/*-
 *   Method Name:  NDFDgenByDayLatLonList
 * Documentation:  Returns National Weather Service digital weather forecast data
 *                 summarized over either 24- or 12-hourly periods
 */

@interface NDFDgenByDayLatLonList : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_startDate:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|date */) in_startDate in_numDays:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|integer */) in_numDays in_format:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|formatType */) in_format;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* NDFDgenByDayLatLonList */


/*-
 *   Method Name:  GmlTimeSeries
 * Documentation:  Returns National Weather Service digital weather forecast data
 *                 encoded in GML for a time period
 */

@interface GmlTimeSeries : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_startTime:(NSDate*) in_startTime in_endTime:(NSDate*) in_endTime in_compType:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|compTypeType */) in_compType in_featureType:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|featureTypeType */) in_featureType in_propertyName:(NSString*) in_propertyName;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* GmlTimeSeries */


/*-
 *   Method Name:  LatLonListCityNames
 * Documentation:  Returns a list of latitude and longitude pairs paired with the city
 *                 names they correspond to
 */

@interface LatLonListCityNames : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|displayLevelType */) in_displayLevel;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* LatLonListCityNames */


/*-
 *   Method Name:  LatLonListSquare
 * Documentation:  Returns a list of latitude and longitude pairs in a rectangle
 *                 defined by a central point and distance from that point in the
 *                 latitudinal and longitudinal directions
 */

@interface LatLonListSquare : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(double) in_centerPointLat in_centerPointLon:(double) in_centerPointLon in_distanceLat:(double) in_distanceLat in_distanceLon:(double) in_distanceLon in_resolution:(double) in_resolution;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* LatLonListSquare */


/*-
 *   Method Name:  LatLonListLine
 * Documentation:  Returns a list of latitude and longitude pairs along a line defined
 *                 by the latitude and longitude of the 2 endpoints
 */

@interface LatLonListLine : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(double) in_endPoint1Lat in_endPoint1Lon:(double) in_endPoint1Lon in_endPoint2Lat:(double) in_endPoint2Lat in_endPoint2Lon:(double) in_endPoint2Lon;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* LatLonListLine */


/*-
 *   Method Name:  LatLonListSubgrid
 * Documentation:  Returns a list of latitude and longitude pairs in a rectangular
 *                 subgrid defined by the lower left and upper right points
 */

@interface LatLonListSubgrid : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(double) in_lowerLeftLatitude in_lowerLeftLongitude:(double) in_lowerLeftLongitude in_upperRightLatitude:(double) in_upperRightLatitude in_upperRightLongitude:(double) in_upperRightLongitude in_resolution:(double) in_resolution;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* LatLonListSubgrid */


/*-
 *   Method Name:  CornerPoints
 * Documentation:  Returns four latitude and longitude pairs for corners of an NDFD
 *                 grid and the minimum resolution that will return the entire grid
 */

@interface CornerPoints : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|sectorType */) in_sector;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* CornerPoints */


/*-
 *   Method Name:  NDFDgenLatLonList
 * Documentation:  Returns National Weather Service digital weather forecast data
 */

@interface NDFDgenLatLonList : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_product:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|productType */) in_product in_startTime:(NSDate*) in_startTime in_endTime:(NSDate*) in_endTime in_weatherParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|weatherParametersType */) in_weatherParameters;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* NDFDgenLatLonList */


/*-
 *   Method Name:  LatLonListZipCode
 * Documentation:  Returns a list of latitude and longitude pairs with each pair
 *                 corresponding to an input zip code.
 */

@interface LatLonListZipCode : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|zipCodeListType */) in_zipCodeList;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* LatLonListZipCode */


/*-
 *   Method Name:  GmlLatLonList
 * Documentation:  Returns National Weather Service digital weather forecast data
 *                 encoded in GML for a single time
 */

@interface GmlLatLonList : WSGeneratedObj

// update the parameter list for the invocation.
- (void) setParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_requestedTime:(NSDate*) in_requestedTime in_featureType:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|featureTypeType */) in_featureType in_weatherParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|weatherParametersType */) in_weatherParameters;

// result returns an id from the reply dictionary as specified by the WSDL.
- (id) resultValue;

@end; /* GmlLatLonList */


/*-
 * Web Service:  ndfdXML
 */
@interface ndfdXMLService : NSObject 

+ (id) NDFDgenByDay:(double) in_latitude in_longitude:(double) in_longitude in_startDate:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|date */) in_startDate in_numDays:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|integer */) in_numDays in_format:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|formatType */) in_format;
+ (id) NDFDgen:(double) in_latitude in_longitude:(double) in_longitude in_product:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|productType */) in_product in_startTime:(NSDate*) in_startTime in_endTime:(NSDate*) in_endTime in_weatherParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|weatherParametersType */) in_weatherParameters;
+ (id) NDFDgenByDayLatLonList:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_startDate:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|date */) in_startDate in_numDays:(CFTypeRef /* Complex type http://www.w3.org/2001/XMLSchema|integer */) in_numDays in_format:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|formatType */) in_format;
+ (id) LatLonListCityNames:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|displayLevelType */) in_displayLevel;
+ (id) GmlTimeSeries:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_startTime:(NSDate*) in_startTime in_endTime:(NSDate*) in_endTime in_compType:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|compTypeType */) in_compType in_featureType:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|featureTypeType */) in_featureType in_propertyName:(NSString*) in_propertyName;
+ (id) LatLonListSquare:(double) in_centerPointLat in_centerPointLon:(double) in_centerPointLon in_distanceLat:(double) in_distanceLat in_distanceLon:(double) in_distanceLon in_resolution:(double) in_resolution;
+ (id) LatLonListLine:(double) in_endPoint1Lat in_endPoint1Lon:(double) in_endPoint1Lon in_endPoint2Lat:(double) in_endPoint2Lat in_endPoint2Lon:(double) in_endPoint2Lon;
+ (id) LatLonListSubgrid:(double) in_lowerLeftLatitude in_lowerLeftLongitude:(double) in_lowerLeftLongitude in_upperRightLatitude:(double) in_upperRightLatitude in_upperRightLongitude:(double) in_upperRightLongitude in_resolution:(double) in_resolution;
+ (id) CornerPoints:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|sectorType */) in_sector;
+ (id) NDFDgenLatLonList:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_product:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|productType */) in_product in_startTime:(NSDate*) in_startTime in_endTime:(NSDate*) in_endTime in_weatherParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|weatherParametersType */) in_weatherParameters;
+ (id) LatLonListZipCode:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|zipCodeListType */) in_zipCodeList;
+ (id) GmlLatLonList:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|listLatLonType */) in_listLatLon in_requestedTime:(NSDate*) in_requestedTime in_featureType:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|featureTypeType */) in_featureType in_weatherParameters:(CFTypeRef /* Complex type http://www.weather.gov/forecasts/xml/DWMLgen/schema/DWML.xsd|weatherParametersType */) in_weatherParameters;

@end;


#endif /* __WeatherService__ */
/*-
 * End of WSDL document at
 * http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl
 */
